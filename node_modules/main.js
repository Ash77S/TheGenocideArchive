import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import {
  InstagramEmbed,
  TwitterEmbed,
  TikTokEmbed,
  YouTubeEmbed,
} from 'react-social-media-embed';

const EmbedPreview = ({ url }) => {
  // Check for supported platforms
  if (url.includes('instagram.com')) {
    return <InstagramEmbed url={url} width={300} />;
  }

  if (url.includes('twitter.com')) {
    return <TwitterEmbed url={url} width={300} />;
  }

  if (url.includes('tiktok.com')) {
    return <TikTokEmbed url={url} width={300} />;
  }

  if (url.includes('youtube.com') || url.includes('youtu.be')) {
    return <YouTubeEmbed url={url} width={300} />;
  }

  // Fallback for unsupported links (e.g., Telegram)
  if (url.includes('t.me')) {
    return (
      <div className="telegram-preview">
        <p>Telegram link:</p>
        <a href={url} target="_blank" rel="noopener noreferrer">
          View on Telegram
        </a>
      </div>
    );
  }

  // Generic fallback for unsupported links
  return (
    <div className="generic-preview">
      <p>Preview not available:</p>
      <a href={url} target="_blank" rel="noopener noreferrer">
        {url}
      </a>
    </div>
  );
};

const TimelineItem = ({ fields }) => {
  return (
    <div className="timeline-item">
      <div className="date">{fields.date || 'Date not provided'}</div>
      <h3>{fields.description || 'No description available'}</h3>
      {fields.source_1 && <EmbedPreview url={fields.source_1} />}
      {fields.tags && <p>Tags: {fields.tags}</p>}
    </div>
  );
};

const Timeline = ({ records }) => {
  return (
    <div className="timeline">
      {records.map((record, index) => (
        <TimelineItem key={index} fields={record.fields} />
      ))}
    </div>
  );
};

const App = () => {
  const [records, setRecords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchAllRecords = async () => {
      const allRecords = [];
      let offset = null;

      try {
        do {
          const url = `https://api.airtable.com/v0/appkpyLd4TzlG0MJf/tblijFR7QOqP28IzT?${offset ? `offset=${offset}` : ''}`;
          const response = await fetch(url, {
            headers: {
              Authorization: 'Bearer pat5b0ieYGAdRQDps.36b19bce15bd804b98c683c2b398b4727b157bb4346015a41226f77b74fd6d1e',
            },
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const data = await response.json();
          allRecords.push(...data.records);
          offset = data.offset;
        } while (offset);

        setRecords(allRecords);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchAllRecords();
  }, []);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return <Timeline records={records} />;
};

ReactDOM.render(<App />, document.getElementById('timeline'));
