{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/GitHub/TheGenocideArchive/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { SocialMediaEmbed } from 'react-social-media-embed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const API_URL = '/api/records'; // Backend endpoint for fetching records\n\n  const [timelineData, setTimelineData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [offset, setOffset] = useState(null);\n\n  // Fetch data from the backend\n  const fetchRecords = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError('');\n      const response = await fetch(`${API_URL}${offset ? `?offset=${offset}` : ''}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching records: ${response.status}`);\n      }\n      const data = await response.json();\n      setTimelineData(prev => [...prev, ...data.records]);\n      setOffset(data.offset || null); // Update offset for pagination\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch records.');\n    } finally {\n      setLoading(false);\n    }\n  }, [API_URL, offset]);\n\n  // Fetch records on component mount\n  useEffect(() => {\n    fetchRecords();\n  }, [fetchRecords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Genocide Archive Timeline\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline\",\n      children: timelineData.length > 0 ? timelineData.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeline-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date\",\n          children: record.fields.date ? `Date: ${record.fields.date}` : 'Date: Not provided'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: record.fields.description || 'No description available.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), record.fields.source_1 && /*#__PURE__*/_jsxDEV(SocialMediaEmbed, {\n          url: record.fields.source_1,\n          width: 500,\n          height: 300\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), offset && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"load-more\",\n      onClick: fetchRecords,\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"P1vMacGgvnCF5NrIApOmec4bIe8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","SocialMediaEmbed","jsxDEV","_jsxDEV","App","_s","API_URL","timelineData","setTimelineData","loading","setLoading","error","setError","offset","setOffset","fetchRecords","response","fetch","ok","Error","status","data","json","prev","records","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","record","index","fields","date","description","source_1","url","width","height","onClick","_c","$RefreshReg$"],"sources":["/Users/mac/Documents/GitHub/TheGenocideArchive/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport { SocialMediaEmbed } from 'react-social-media-embed';\n\nconst App = () => {\n  const API_URL = '/api/records'; // Backend endpoint for fetching records\n\n  const [timelineData, setTimelineData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [offset, setOffset] = useState(null);\n\n  // Fetch data from the backend\n  const fetchRecords = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError('');\n      const response = await fetch(`${API_URL}${offset ? `?offset=${offset}` : ''}`);\n      if (!response.ok) {\n        throw new Error(`Error fetching records: ${response.status}`);\n      }\n      const data = await response.json();\n      setTimelineData((prev) => [...prev, ...data.records]);\n      setOffset(data.offset || null); // Update offset for pagination\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch records.');\n    } finally {\n      setLoading(false);\n    }\n  }, [API_URL, offset]);\n\n  // Fetch records on component mount\n  useEffect(() => {\n    fetchRecords();\n  }, [fetchRecords]);\n\n  return (\n    <div className=\"App\">\n      <h1>Genocide Archive Timeline</h1>\n      <div className=\"timeline\">\n        {timelineData.length > 0 ? (\n          timelineData.map((record, index) => (\n            <div key={index} className=\"timeline-item\">\n              <div className=\"date\">\n                {record.fields.date ? `Date: ${record.fields.date}` : 'Date: Not provided'}\n              </div>\n              <h3>{record.fields.description || 'No description available.'}</h3>\n              {record.fields.source_1 && (\n                <SocialMediaEmbed url={record.fields.source_1} width={500} height={300} />\n              )}\n            </div>\n          ))\n        ) : (\n          <p>No data available.</p>\n        )}\n      </div>\n      {loading && <p>Loading...</p>}\n      {error && <p className=\"error\">{error}</p>}\n      {offset && (\n        <button className=\"load-more\" onClick={fetchRecords}>\n          Load More\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,WAAW;AAClB,SAASC,gBAAgB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,OAAO,GAAG,cAAc,CAAC,CAAC;;EAEhC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACA,MAAMiB,YAAY,GAAGf,WAAW,CAAC,YAAY;IAC3C,IAAI;MACFU,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,EAAE,CAAC;MACZ,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,OAAO,GAAGO,MAAM,GAAG,WAAWA,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;MAC9E,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC/D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClCd,eAAe,CAAEe,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC;MACrDV,SAAS,CAACO,IAAI,CAACR,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZC,OAAO,CAACf,KAAK,CAACc,GAAG,CAAC;MAClBb,QAAQ,CAAC,0BAA0B,CAAC;IACtC,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACJ,OAAO,EAAEO,MAAM,CAAC,CAAC;;EAErB;EACAd,SAAS,CAAC,MAAM;IACdgB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,oBACEZ,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAAyB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClC7B,OAAA;MAAKwB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtBrB,YAAY,CAAC0B,MAAM,GAAG,CAAC,GACtB1B,YAAY,CAAC2B,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC7BjC,OAAA;QAAiBwB,SAAS,EAAC,eAAe;QAAAC,QAAA,gBACxCzB,OAAA;UAAKwB,SAAS,EAAC,MAAM;UAAAC,QAAA,EAClBO,MAAM,CAACE,MAAM,CAACC,IAAI,GAAG,SAASH,MAAM,CAACE,MAAM,CAACC,IAAI,EAAE,GAAG;QAAoB;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvE,CAAC,eACN7B,OAAA;UAAAyB,QAAA,EAAKO,MAAM,CAACE,MAAM,CAACE,WAAW,IAAI;QAA2B;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAClEG,MAAM,CAACE,MAAM,CAACG,QAAQ,iBACrBrC,OAAA,CAACF,gBAAgB;UAACwC,GAAG,EAAEN,MAAM,CAACE,MAAM,CAACG,QAAS;UAACE,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE;QAAI;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAC1E;MAAA,GAPOI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQV,CACN,CAAC,gBAEF7B,OAAA;QAAAyB,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACzB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EACLvB,OAAO,iBAAIN,OAAA;MAAAyB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5BrB,KAAK,iBAAIR,OAAA;MAAGwB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEjB;IAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzCnB,MAAM,iBACLV,OAAA;MAAQwB,SAAS,EAAC,WAAW;MAACiB,OAAO,EAAE7B,YAAa;MAAAa,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA9DID,GAAG;AAAAyC,EAAA,GAAHzC,GAAG;AAgET,eAAeA,GAAG;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}